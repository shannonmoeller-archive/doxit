extends layout

block head
  style.
    body { padding-top: 1em; }
    pre { margin-bottom: 1.25em; }
    pre code { font-size: .8em; }
    table { width: 100%; }
    td, th { vertical-align: top; }
    th { text-align: left; }
    .top-bar { margin-bottom: 0; }
    .row { max-width: none }
    .flex { position: relative; }
    .flex > .columns { position: static; }
    .flex > * + *:before {
      content: " ";
      display: block;
      position: absolute;
      right: 0;
      top: 0;
      z-index: -1;
      height: 100%;
      width: 50%;
      background: #f5f2f0;
    }
    .side-nav {
      padding-top: 3em;
    }
    .side-nav a {
      white-space: nowrap;
      width: 100%;
      overflow: hidden;
      text-overflow: ellipsis;
    }
    .side-nav a.isCurrent {
      color: inherit;
      font-weight: bold;
    }
    .docblock-hd {
      padding-top: 3em;
    }
    .code {
      padding-top: 2em;
    }

block body
  .fixed
    nav.top-bar(aria-label="Page Navigation")
      ul.title-area

        li.name
          h1
            a(href="#{base}", rel="home")
              span #{title}

        li.toggle-topbar.menu-icon
          a(href="#")
            span Menu

      section.top-bar-section
        ul.right
          li.has-dropdown
            a(href="#{base}#{meta.originalPath}.html")
              span #{meta.originalPath}

            if meta.extension === '.js'
              ul.dropdown
                each comment in meta.data
                  if comment.ctx
                    id = comment.ctx && comment.ctx.string.replace(/[^\w\d]+/g, '-')

                    li
                      a(href="##{id}")
                        span #{comment.ctx.name}
                        mixin type(comment.ctx.type)

  .row
    .large-10.push-2.columns
      if meta.extension === '.js'
        each comment in meta.data
          mixin jsdoc(comment)

      if /.html|.md/.test(meta.extension)
        mixin html(meta.data)

    .large-2.pull-10.columns
      nav(aria-label="Codebase Navigation")
        ul.side-nav
          each file in files
            li
              if file.originalPath === meta.originalPath
                a(href="#{base}#{file.originalPath}.html", class="isCurrent") #{file.originalPath}
              else
                a(href="#{base}#{file.originalPath}.html") #{file.originalPath}

mixin html(data)
  .row.flex
    .large-8.columns
      .docblock
        .docblock-hd !{data}

mixin jsdoc(comment)
  .row.flex
    .large-6.columns
      if !/^<p>(lobal|s[hl]int)/.test(comment.description.full)
        id = comment.ctx && comment.ctx.string.replace(/[^\w\d]+/g, '-')

        .docblock(id="#{id}")
          .docblock-hd
            if comment.ctx
              h4
                span #{comment.ctx.name}
                mixin type(comment.ctx.type)

            .summary !{comment.description.summary.replace(/\<br \/\>/g, ' ')}

          .docblock-bd
            if comment.tags && comment.tags.length
              table.tags
                each tag in comment.tags
                  tr.tag
                    th
                      b #{tag.type}

                    if tag.types
                      td
                        span.label.radius.secondary #{tag.types.join(',')}

                      td
                        code #{tag.name}

                      td #{tag.description || tag.otherClass || tag.string}

                    else
                      td(colspan="3")
                        if tag.type === 'augments'
                          other = tag.otherClass.replace(/^[^:]+:/, '')

                          a(href="#{base}#{other}#{meta.extension}.html") #{other}
                        else
                          | #{tag.description || tag.otherClass || tag.visibility || tag.string}

          .description !{comment.description.body.replace(/\<br \/\>/g, ' ')}

    .large-6.columns
      if comment.code
        .code
          pre
            code.language-javascript #{comment.code}

mixin type(type)
  if /function|method/.test(type)
    span(aria-hidden="true") &nbsp;(&nbsp;)

  | &nbsp;

  if /function|method/.test(type)
    span.label.radius.right #{type}
  else if /declaration|property/.test(type)
    span.label.radius.right.success #{type}
  else
    span.label.radius.right.secondary #{type}
