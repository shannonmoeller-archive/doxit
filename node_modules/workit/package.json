{
  "name": "workit",
  "version": "1.0.2",
  "description": "The stupid development server. Serves CoffeeScript, Jade, and Stylus like a champ. Reloads browser on source-file change. CORS enabled.",
  "keywords": [
    "assets",
    "compile",
    "cors",
    "live",
    "preprocess",
    "proxy",
    "reload",
    "serve",
    "static",
    "watch"
  ],
  "author": {
    "name": "Shannon Moeller",
    "email": "me@shannonmoeller.com",
    "url": "http://shannonmoeller.com"
  },
  "contributors": [
    {
      "name": "Patrik Votoƒçek",
      "email": "patrik@votocek.cz",
      "url": "http://patrik.votocek.cz"
    }
  ],
  "main": "src/workit.coffee",
  "bin": {
    "workit": "./bin/workit"
  },
  "repository": {
    "type": "git",
    "url": "http://github.com/shannonmoeller/workit.git"
  },
  "scripts": {
    "test": "make test",
    "watch": "make watch"
  },
  "dependencies": {
    "chokidar": "*",
    "coffee-script": "*",
    "commander": "*",
    "connect": "*",
    "jade": "*",
    "multimarkdown": "*",
    "nib": "*",
    "snockets": "*",
    "socket.io": "*",
    "step": "*",
    "stylus": "*"
  },
  "devDependencies": {
    "forever": "*"
  },
  "readme": "workit\n======\n\nThe stupid development server.\n\n- Reloads browser on source-file change.\n- Serves [CoffeeScript][coff], [Jade][jade], and [Stylus][styl] like a champ.\n- Compiled output sent directly to browser for a pristine working directory.\n- No preprocessor caching so you're guaranteed to load the freshest code.\n- CORS enabled.\n\nBuilt with [Node.js][node] using [Connect][conn], [Socket.io][sock],\n[Commander.js][comm], and [Chokidar][chok]. Inspired by visionmedia's [serve][serv]\nand nodejitsu's [http-server][hser].\n\nInstallation\n------------\n\nVia [npm](http://npmjs.org/):\n\n    $ npm install -g workit\n\nUsage\n-----\n\n```\n\n    Usage: workit [options] [dir]\n\n    Options:\n\n      -h, --help              output usage information\n      -V, --version           output the version number\n      -a, --address <string>  set hostname [127.0.0.1]\n      -f, --format <string>   connect logger format [dev]\n      -p, --port <number>     set port number [3000]\n\n    Examples:\n\n      Serve the current directory\n\n        $ cd /var/www\n        $ workit\n        Serving /var/www at http://localhost:3000/\n\n      Serve a specific directory\n\n        $ workit /var/www/foo\n        Serving /var/www/foo at http://localhost:3000/\n\n      Serve a specific directory with options\n\n        $ workit -a 192.168.0.1 -p 8080 /var/www/foo\n        Serving /var/www/foo at http://192.168.0.1:8080/\n\n```\n\nFeatures\n--------\n\n### Preprocessing\n\n`workit` transparently compiles `.coffee`, `.jade`, and `.styl` files and sends\nthe output directly to the browser. No rendered files are written to disk, so\nyour working directory is left in a pristine state (I'm looking at you\n[connect-assets][coas]).\n\nFile extensions are taken literally. If you request `.jade`, you'll get Jade:\n\n```\n\n    $ curl 'http://localhost:3000/foo.jade'\n    !!! 5\n    title Hello world\n    link(rel='stylesheet', href='foo.css')\n    script(src='workit-reload.js')\n    script(src='foo.js')\n\n```\n\nIf you want the slightly-more-useful compiled HTML, request `.htm` or `.html`\ninstead:\n\n```\n\n    $ curl 'http://localhost:3000/foo.html'\n    <!DOCTYPE html>\n    <title>Hello world</title>\n    <link rel=\"stylesheet\" href=\"foo.css\">\n    <script src=\"workit-reload.js\"></script>\n    <script src=\"foo.js\"></script>\n\n```\n\nSame goes for `.coffee` vs `.js` and `.styl` vs `.css`.\n\n### Auto-reload\n\nTo enable automatic reloading of a page when a file in your project is created\nor changed, simply include the virtual `workit-reload.js` in your markup:\n\n```\n\n    <!-- HTML -->\n    <script src=\"workit-reload.js\"></script>\n\n    // Jade\n    script(src='workit-reload.js')\n\n```\n\nThe filename is magic, so the path doesn't matter:\n\n```\n\n    // Also works!\n    script(src='../my/public/assets/dir/workit-reload.js')\n\n```\n\n### CORS (cross-origin resource sharing)\n\nAll requests are forcibly served with the `Access-Control-Allow-Origin: *`\nheader to [enable CORS][cors].\n\nThird-party resources that aren't CORS friendly can be requested via the\nbuilt-in, and quite naive, proxy:\n\n```\n\n    $ curl 'http://localhost:3000/workit-cors/http://www.google.com/search?q=nodejs'\n    <!doctype html><html itemscope=\"itemscope\" itemtype=\"http://schema.org/WebPage\" ...\n\n```\n\n### Nib\n\n[Nib][nib] is made available to Stylus files. Just import it:\n\n```\n\n    @import 'nib'\n\n    *\n        // Nib will add vendor prefixed variants\n        box-sizing: border-box\n\n```\n\n### Data URI Inlining\n\nInlining of assets via Stylus' `url()` is not enabled (this is a dev server\nafter all), but you may install [node-canvas][ncan] to get IE-friendly inlined\ngradients.\n\nChange Log\n----------\n\n### 1.0.2\n- Corrected host value in piped request headers.\n- Fixed another string length bug in workit-cors.\n\n### 1.0.1\n- Fixed string length bug in workit-cors.\n\n### 1.0.0\n- Changed middleware prefixes from `connect-` to `workit-` so as not to be\n  confused with middleware of the same name by different authors.\n\n### 0.3.0\n- Now using `chokidar` instead of `watchr`. Vastly improves performance and\n  cross-platform reliability of file watching, especially when the server should\n  be idle. Fixes #6.\n\n### 0.2.4\n- Upgraded from `flow` to `step`.\n\n### 0.2.3\n- Replaced all `fs.*Sync` with their async counterparts.\n- Nuked some superfluous variable assignments.\n\n### 0.2.2\n- Added CORS header and proxy.\n\n### 0.2.1\n\n- Now using `watchr` instead of `hound`. Common system and hidden files are now\n  ignored. Fixes #5.\n- Now using `forever` instead of `supervisor` in `make test`.\n\nLicense\n-------\n\n(The MIT License)\n\nCopyright (c) Shannon Moeller &lt;me@shannonmoeller.com&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n[chok]: https://github.com/paulmillr/chokidar/\n[coas]: https://github.com/TrevorBurnham/connect-assets/\n[coff]: http://coffeescript.org/\n[comm]: http://visionmedia.github.com/commander.js/\n[conn]: http://senchalabs.org/connect/\n[cors]: http://enable-cors.org/\n[hser]: https://github.com/nodeapps/http-server/\n[jade]: http://jade-lang.com/\n[ncan]: https://github.com/LearnBoost/node-canvas/\n[nib]:  http://visionmedia.github.com/nib/\n[node]: http://nodejs.org/\n[serv]: https://github.com/visionmedia/serve/\n[sock]: http://socket.io/\n[styl]: http://learnboost.github.com/stylus/\n",
  "readmeFilename": "Readme.md",
  "_id": "workit@1.0.2",
  "_from": "workit@*"
}
